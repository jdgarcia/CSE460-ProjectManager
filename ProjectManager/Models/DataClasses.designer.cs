#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProjectManager.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ProjectManager")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertProjectEmployee(ProjectEmployee instance);
    partial void UpdateProjectEmployee(ProjectEmployee instance);
    partial void DeleteProjectEmployee(ProjectEmployee instance);
    partial void InsertProjectRequirement(ProjectRequirement instance);
    partial void UpdateProjectRequirement(ProjectRequirement instance);
    partial void DeleteProjectRequirement(ProjectRequirement instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertRequirement(Requirement instance);
    partial void UpdateRequirement(Requirement instance);
    partial void DeleteRequirement(Requirement instance);
    partial void InsertRequirementType(RequirementType instance);
    partial void UpdateRequirementType(RequirementType instance);
    partial void DeleteRequirementType(RequirementType instance);
    partial void InsertStatus(Status instance);
    partial void UpdateStatus(Status instance);
    partial void DeleteStatus(Status instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertTenant(Tenant instance);
    partial void UpdateTenant(Tenant instance);
    partial void DeleteTenant(Tenant instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ProjectManagerConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ProjectEmployee> ProjectEmployees
		{
			get
			{
				return this.GetTable<ProjectEmployee>();
			}
		}
		
		public System.Data.Linq.Table<ProjectRequirement> ProjectRequirements
		{
			get
			{
				return this.GetTable<ProjectRequirement>();
			}
		}
		
		public System.Data.Linq.Table<Project> Projects
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<Requirement> Requirements
		{
			get
			{
				return this.GetTable<Requirement>();
			}
		}
		
		public System.Data.Linq.Table<RequirementType> RequirementTypes
		{
			get
			{
				return this.GetTable<RequirementType>();
			}
		}
		
		public System.Data.Linq.Table<Status> Status
		{
			get
			{
				return this.GetTable<Status>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Tenant> Tenants
		{
			get
			{
				return this.GetTable<Tenant>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectEmployees")]
	public partial class ProjectEmployee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TenantId;
		
		private int _ProjectId;
		
		private int _UserId;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<User> _User;
		
		private EntityRef<Tenant> _Tenant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenantIdChanging(int value);
    partial void OnTenantIdChanged();
    partial void OnProjectIdChanging(int value);
    partial void OnProjectIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    #endregion
		
		public ProjectEmployee()
		{
			this._Project = default(EntityRef<Project>);
			this._User = default(EntityRef<User>);
			this._Tenant = default(EntityRef<Tenant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TenantId
		{
			get
			{
				return this._TenantId;
			}
			set
			{
				if ((this._TenantId != value))
				{
					if (this._Tenant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTenantIdChanging(value);
					this.SendPropertyChanging();
					this._TenantId = value;
					this.SendPropertyChanged("TenantId");
					this.OnTenantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectEmployee", Storage="_Project", ThisKey="ProjectId", OtherKey="ProjectId", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.ProjectEmployees.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.ProjectEmployees.Add(this);
						this._ProjectId = value.ProjectId;
					}
					else
					{
						this._ProjectId = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ProjectEmployee", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ProjectEmployees.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ProjectEmployees.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_ProjectEmployee", Storage="_Tenant", ThisKey="TenantId", OtherKey="TenantId", IsForeignKey=true)]
		public Tenant Tenant
		{
			get
			{
				return this._Tenant.Entity;
			}
			set
			{
				Tenant previousValue = this._Tenant.Entity;
				if (((previousValue != value) 
							|| (this._Tenant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tenant.Entity = null;
						previousValue.ProjectEmployees.Remove(this);
					}
					this._Tenant.Entity = value;
					if ((value != null))
					{
						value.ProjectEmployees.Add(this);
						this._TenantId = value.TenantId;
					}
					else
					{
						this._TenantId = default(int);
					}
					this.SendPropertyChanged("Tenant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectRequirements")]
	public partial class ProjectRequirement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TenantId;
		
		private int _ProjectId;
		
		private int _RequirementId;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<Requirement> _Requirement;
		
		private EntityRef<Tenant> _Tenant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenantIdChanging(int value);
    partial void OnTenantIdChanged();
    partial void OnProjectIdChanging(int value);
    partial void OnProjectIdChanged();
    partial void OnRequirementIdChanging(int value);
    partial void OnRequirementIdChanged();
    #endregion
		
		public ProjectRequirement()
		{
			this._Project = default(EntityRef<Project>);
			this._Requirement = default(EntityRef<Requirement>);
			this._Tenant = default(EntityRef<Tenant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TenantId
		{
			get
			{
				return this._TenantId;
			}
			set
			{
				if ((this._TenantId != value))
				{
					if (this._Tenant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTenantIdChanging(value);
					this.SendPropertyChanging();
					this._TenantId = value;
					this.SendPropertyChanged("TenantId");
					this.OnTenantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequirementId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RequirementId
		{
			get
			{
				return this._RequirementId;
			}
			set
			{
				if ((this._RequirementId != value))
				{
					if (this._Requirement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequirementIdChanging(value);
					this.SendPropertyChanging();
					this._RequirementId = value;
					this.SendPropertyChanged("RequirementId");
					this.OnRequirementIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectRequirement", Storage="_Project", ThisKey="ProjectId", OtherKey="ProjectId", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.ProjectRequirements.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.ProjectRequirements.Add(this);
						this._ProjectId = value.ProjectId;
					}
					else
					{
						this._ProjectId = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Requirement_ProjectRequirement", Storage="_Requirement", ThisKey="RequirementId", OtherKey="RequirementId", IsForeignKey=true)]
		public Requirement Requirement
		{
			get
			{
				return this._Requirement.Entity;
			}
			set
			{
				Requirement previousValue = this._Requirement.Entity;
				if (((previousValue != value) 
							|| (this._Requirement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Requirement.Entity = null;
						previousValue.ProjectRequirements.Remove(this);
					}
					this._Requirement.Entity = value;
					if ((value != null))
					{
						value.ProjectRequirements.Add(this);
						this._RequirementId = value.RequirementId;
					}
					else
					{
						this._RequirementId = default(int);
					}
					this.SendPropertyChanged("Requirement");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_ProjectRequirement", Storage="_Tenant", ThisKey="TenantId", OtherKey="TenantId", IsForeignKey=true)]
		public Tenant Tenant
		{
			get
			{
				return this._Tenant.Entity;
			}
			set
			{
				Tenant previousValue = this._Tenant.Entity;
				if (((previousValue != value) 
							|| (this._Tenant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tenant.Entity = null;
						previousValue.ProjectRequirements.Remove(this);
					}
					this._Tenant.Entity = value;
					if ((value != null))
					{
						value.ProjectRequirements.Add(this);
						this._TenantId = value.TenantId;
					}
					else
					{
						this._TenantId = default(int);
					}
					this.SendPropertyChanged("Tenant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Projects")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TenantId;
		
		private int _ProjectId;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _Start;
		
		private System.Nullable<System.DateTime> _ExpectedEnd;
		
		private int _Status;
		
		private int _ManagerId;
		
		private EntitySet<ProjectEmployee> _ProjectEmployees;
		
		private EntitySet<ProjectRequirement> _ProjectRequirements;
		
		private EntityRef<Status> _Status1;
		
		private EntityRef<User> _User;
		
		private EntityRef<Tenant> _Tenant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenantIdChanging(int value);
    partial void OnTenantIdChanged();
    partial void OnProjectIdChanging(int value);
    partial void OnProjectIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStartChanging(System.Nullable<System.DateTime> value);
    partial void OnStartChanged();
    partial void OnExpectedEndChanging(System.Nullable<System.DateTime> value);
    partial void OnExpectedEndChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnManagerIdChanging(int value);
    partial void OnManagerIdChanged();
    #endregion
		
		public Project()
		{
			this._ProjectEmployees = new EntitySet<ProjectEmployee>(new Action<ProjectEmployee>(this.attach_ProjectEmployees), new Action<ProjectEmployee>(this.detach_ProjectEmployees));
			this._ProjectRequirements = new EntitySet<ProjectRequirement>(new Action<ProjectRequirement>(this.attach_ProjectRequirements), new Action<ProjectRequirement>(this.detach_ProjectRequirements));
			this._Status1 = default(EntityRef<Status>);
			this._User = default(EntityRef<User>);
			this._Tenant = default(EntityRef<Tenant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantId", DbType="Int NOT NULL")]
		public int TenantId
		{
			get
			{
				return this._TenantId;
			}
			set
			{
				if ((this._TenantId != value))
				{
					if (this._Tenant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTenantIdChanging(value);
					this.SendPropertyChanging();
					this._TenantId = value;
					this.SendPropertyChanged("TenantId");
					this.OnTenantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Start", DbType="Date")]
		public System.Nullable<System.DateTime> Start
		{
			get
			{
				return this._Start;
			}
			set
			{
				if ((this._Start != value))
				{
					this.OnStartChanging(value);
					this.SendPropertyChanging();
					this._Start = value;
					this.SendPropertyChanged("Start");
					this.OnStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpectedEnd", DbType="Date")]
		public System.Nullable<System.DateTime> ExpectedEnd
		{
			get
			{
				return this._ExpectedEnd;
			}
			set
			{
				if ((this._ExpectedEnd != value))
				{
					this.OnExpectedEndChanging(value);
					this.SendPropertyChanging();
					this._ExpectedEnd = value;
					this.SendPropertyChanged("ExpectedEnd");
					this.OnExpectedEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					if (this._Status1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManagerId", DbType="Int NOT NULL")]
		public int ManagerId
		{
			get
			{
				return this._ManagerId;
			}
			set
			{
				if ((this._ManagerId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManagerIdChanging(value);
					this.SendPropertyChanging();
					this._ManagerId = value;
					this.SendPropertyChanged("ManagerId");
					this.OnManagerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectEmployee", Storage="_ProjectEmployees", ThisKey="ProjectId", OtherKey="ProjectId")]
		public EntitySet<ProjectEmployee> ProjectEmployees
		{
			get
			{
				return this._ProjectEmployees;
			}
			set
			{
				this._ProjectEmployees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectRequirement", Storage="_ProjectRequirements", ThisKey="ProjectId", OtherKey="ProjectId")]
		public EntitySet<ProjectRequirement> ProjectRequirements
		{
			get
			{
				return this._ProjectRequirements;
			}
			set
			{
				this._ProjectRequirements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Project", Storage="_Status1", ThisKey="Status", OtherKey="StatusId", IsForeignKey=true)]
		public Status Status1
		{
			get
			{
				return this._Status1.Entity;
			}
			set
			{
				Status previousValue = this._Status1.Entity;
				if (((previousValue != value) 
							|| (this._Status1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Status1.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._Status1.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._Status = value.StatusId;
					}
					else
					{
						this._Status = default(int);
					}
					this.SendPropertyChanged("Status1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Project", Storage="_User", ThisKey="ManagerId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._ManagerId = value.UserId;
					}
					else
					{
						this._ManagerId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_Project", Storage="_Tenant", ThisKey="TenantId", OtherKey="TenantId", IsForeignKey=true)]
		public Tenant Tenant
		{
			get
			{
				return this._Tenant.Entity;
			}
			set
			{
				Tenant previousValue = this._Tenant.Entity;
				if (((previousValue != value) 
							|| (this._Tenant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tenant.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._Tenant.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._TenantId = value.TenantId;
					}
					else
					{
						this._TenantId = default(int);
					}
					this.SendPropertyChanged("Tenant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectEmployees(ProjectEmployee entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_ProjectEmployees(ProjectEmployee entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_ProjectRequirements(ProjectRequirement entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_ProjectRequirements(ProjectRequirement entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Requirements")]
	public partial class Requirement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TenantId;
		
		private int _RequirementId;
		
		private string _Description;
		
		private int _TypeId;
		
		private System.Nullable<int> _Time;
		
		private System.Nullable<int> _AssignedUser;
		
		private int _Status;
		
		private EntitySet<ProjectRequirement> _ProjectRequirements;
		
		private EntityRef<RequirementType> _RequirementType;
		
		private EntityRef<Status> _Status1;
		
		private EntityRef<User> _User;
		
		private EntityRef<Tenant> _Tenant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenantIdChanging(int value);
    partial void OnTenantIdChanged();
    partial void OnRequirementIdChanging(int value);
    partial void OnRequirementIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTypeIdChanging(int value);
    partial void OnTypeIdChanged();
    partial void OnTimeChanging(System.Nullable<int> value);
    partial void OnTimeChanged();
    partial void OnAssignedUserChanging(System.Nullable<int> value);
    partial void OnAssignedUserChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    #endregion
		
		public Requirement()
		{
			this._ProjectRequirements = new EntitySet<ProjectRequirement>(new Action<ProjectRequirement>(this.attach_ProjectRequirements), new Action<ProjectRequirement>(this.detach_ProjectRequirements));
			this._RequirementType = default(EntityRef<RequirementType>);
			this._Status1 = default(EntityRef<Status>);
			this._User = default(EntityRef<User>);
			this._Tenant = default(EntityRef<Tenant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantId", DbType="Int NOT NULL")]
		public int TenantId
		{
			get
			{
				return this._TenantId;
			}
			set
			{
				if ((this._TenantId != value))
				{
					if (this._Tenant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTenantIdChanging(value);
					this.SendPropertyChanging();
					this._TenantId = value;
					this.SendPropertyChanged("TenantId");
					this.OnTenantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequirementId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RequirementId
		{
			get
			{
				return this._RequirementId;
			}
			set
			{
				if ((this._RequirementId != value))
				{
					this.OnRequirementIdChanging(value);
					this.SendPropertyChanging();
					this._RequirementId = value;
					this.SendPropertyChanged("RequirementId");
					this.OnRequirementIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeId", DbType="Int NOT NULL")]
		public int TypeId
		{
			get
			{
				return this._TypeId;
			}
			set
			{
				if ((this._TypeId != value))
				{
					if (this._RequirementType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIdChanging(value);
					this.SendPropertyChanging();
					this._TypeId = value;
					this.SendPropertyChanged("TypeId");
					this.OnTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Int")]
		public System.Nullable<int> Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssignedUser", DbType="Int")]
		public System.Nullable<int> AssignedUser
		{
			get
			{
				return this._AssignedUser;
			}
			set
			{
				if ((this._AssignedUser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssignedUserChanging(value);
					this.SendPropertyChanging();
					this._AssignedUser = value;
					this.SendPropertyChanged("AssignedUser");
					this.OnAssignedUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					if (this._Status1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Requirement_ProjectRequirement", Storage="_ProjectRequirements", ThisKey="RequirementId", OtherKey="RequirementId")]
		public EntitySet<ProjectRequirement> ProjectRequirements
		{
			get
			{
				return this._ProjectRequirements;
			}
			set
			{
				this._ProjectRequirements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RequirementType_Requirement", Storage="_RequirementType", ThisKey="TypeId", OtherKey="TypeId", IsForeignKey=true)]
		public RequirementType RequirementType
		{
			get
			{
				return this._RequirementType.Entity;
			}
			set
			{
				RequirementType previousValue = this._RequirementType.Entity;
				if (((previousValue != value) 
							|| (this._RequirementType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RequirementType.Entity = null;
						previousValue.Requirements.Remove(this);
					}
					this._RequirementType.Entity = value;
					if ((value != null))
					{
						value.Requirements.Add(this);
						this._TypeId = value.TypeId;
					}
					else
					{
						this._TypeId = default(int);
					}
					this.SendPropertyChanged("RequirementType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Requirement", Storage="_Status1", ThisKey="Status", OtherKey="StatusId", IsForeignKey=true)]
		public Status Status1
		{
			get
			{
				return this._Status1.Entity;
			}
			set
			{
				Status previousValue = this._Status1.Entity;
				if (((previousValue != value) 
							|| (this._Status1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Status1.Entity = null;
						previousValue.Requirements.Remove(this);
					}
					this._Status1.Entity = value;
					if ((value != null))
					{
						value.Requirements.Add(this);
						this._Status = value.StatusId;
					}
					else
					{
						this._Status = default(int);
					}
					this.SendPropertyChanged("Status1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Requirement", Storage="_User", ThisKey="AssignedUser", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Requirements.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Requirements.Add(this);
						this._AssignedUser = value.UserId;
					}
					else
					{
						this._AssignedUser = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_Requirement", Storage="_Tenant", ThisKey="TenantId", OtherKey="TenantId", IsForeignKey=true)]
		public Tenant Tenant
		{
			get
			{
				return this._Tenant.Entity;
			}
			set
			{
				Tenant previousValue = this._Tenant.Entity;
				if (((previousValue != value) 
							|| (this._Tenant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tenant.Entity = null;
						previousValue.Requirements.Remove(this);
					}
					this._Tenant.Entity = value;
					if ((value != null))
					{
						value.Requirements.Add(this);
						this._TenantId = value.TenantId;
					}
					else
					{
						this._TenantId = default(int);
					}
					this.SendPropertyChanged("Tenant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectRequirements(ProjectRequirement entity)
		{
			this.SendPropertyChanging();
			entity.Requirement = this;
		}
		
		private void detach_ProjectRequirements(ProjectRequirement entity)
		{
			this.SendPropertyChanging();
			entity.Requirement = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RequirementTypes")]
	public partial class RequirementType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TenantId;
		
		private int _TypeId;
		
		private string _Name;
		
		private EntitySet<Requirement> _Requirements;
		
		private EntityRef<Tenant> _Tenant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenantIdChanging(int value);
    partial void OnTenantIdChanged();
    partial void OnTypeIdChanging(int value);
    partial void OnTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public RequirementType()
		{
			this._Requirements = new EntitySet<Requirement>(new Action<Requirement>(this.attach_Requirements), new Action<Requirement>(this.detach_Requirements));
			this._Tenant = default(EntityRef<Tenant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantId", DbType="Int NOT NULL")]
		public int TenantId
		{
			get
			{
				return this._TenantId;
			}
			set
			{
				if ((this._TenantId != value))
				{
					if (this._Tenant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTenantIdChanging(value);
					this.SendPropertyChanging();
					this._TenantId = value;
					this.SendPropertyChanged("TenantId");
					this.OnTenantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TypeId
		{
			get
			{
				return this._TypeId;
			}
			set
			{
				if ((this._TypeId != value))
				{
					this.OnTypeIdChanging(value);
					this.SendPropertyChanging();
					this._TypeId = value;
					this.SendPropertyChanged("TypeId");
					this.OnTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RequirementType_Requirement", Storage="_Requirements", ThisKey="TypeId", OtherKey="TypeId")]
		public EntitySet<Requirement> Requirements
		{
			get
			{
				return this._Requirements;
			}
			set
			{
				this._Requirements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_RequirementType", Storage="_Tenant", ThisKey="TenantId", OtherKey="TenantId", IsForeignKey=true)]
		public Tenant Tenant
		{
			get
			{
				return this._Tenant.Entity;
			}
			set
			{
				Tenant previousValue = this._Tenant.Entity;
				if (((previousValue != value) 
							|| (this._Tenant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tenant.Entity = null;
						previousValue.RequirementTypes.Remove(this);
					}
					this._Tenant.Entity = value;
					if ((value != null))
					{
						value.RequirementTypes.Add(this);
						this._TenantId = value.TenantId;
					}
					else
					{
						this._TenantId = default(int);
					}
					this.SendPropertyChanged("Tenant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Requirements(Requirement entity)
		{
			this.SendPropertyChanging();
			entity.RequirementType = this;
		}
		
		private void detach_Requirements(Requirement entity)
		{
			this.SendPropertyChanging();
			entity.RequirementType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Status")]
	public partial class Status : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TenantId;
		
		private int _StatusId;
		
		private string _Name;
		
		private EntitySet<Project> _Projects;
		
		private EntitySet<Requirement> _Requirements;
		
		private EntityRef<Tenant> _Tenant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenantIdChanging(int value);
    partial void OnTenantIdChanged();
    partial void OnStatusIdChanging(int value);
    partial void OnStatusIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Status()
		{
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			this._Requirements = new EntitySet<Requirement>(new Action<Requirement>(this.attach_Requirements), new Action<Requirement>(this.detach_Requirements));
			this._Tenant = default(EntityRef<Tenant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantId", DbType="Int NOT NULL")]
		public int TenantId
		{
			get
			{
				return this._TenantId;
			}
			set
			{
				if ((this._TenantId != value))
				{
					if (this._Tenant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTenantIdChanging(value);
					this.SendPropertyChanging();
					this._TenantId = value;
					this.SendPropertyChanged("TenantId");
					this.OnTenantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StatusId
		{
			get
			{
				return this._StatusId;
			}
			set
			{
				if ((this._StatusId != value))
				{
					this.OnStatusIdChanging(value);
					this.SendPropertyChanging();
					this._StatusId = value;
					this.SendPropertyChanged("StatusId");
					this.OnStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Project", Storage="_Projects", ThisKey="StatusId", OtherKey="Status")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Requirement", Storage="_Requirements", ThisKey="StatusId", OtherKey="Status")]
		public EntitySet<Requirement> Requirements
		{
			get
			{
				return this._Requirements;
			}
			set
			{
				this._Requirements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_Status", Storage="_Tenant", ThisKey="TenantId", OtherKey="TenantId", IsForeignKey=true)]
		public Tenant Tenant
		{
			get
			{
				return this._Tenant.Entity;
			}
			set
			{
				Tenant previousValue = this._Tenant.Entity;
				if (((previousValue != value) 
							|| (this._Tenant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tenant.Entity = null;
						previousValue.Status.Remove(this);
					}
					this._Tenant.Entity = value;
					if ((value != null))
					{
						value.Status.Add(this);
						this._TenantId = value.TenantId;
					}
					else
					{
						this._TenantId = default(int);
					}
					this.SendPropertyChanged("Tenant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Status1 = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Status1 = null;
		}
		
		private void attach_Requirements(Requirement entity)
		{
			this.SendPropertyChanging();
			entity.Status1 = this;
		}
		
		private void detach_Requirements(Requirement entity)
		{
			this.SendPropertyChanging();
			entity.Status1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TenantId;
		
		private int _UserId;
		
		private int _RoleId;
		
		private string _Username;
		
		private string _Password;
		
		private EntitySet<ProjectEmployee> _ProjectEmployees;
		
		private EntitySet<Project> _Projects;
		
		private EntitySet<Requirement> _Requirements;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<Tenant> _Tenant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenantIdChanging(int value);
    partial void OnTenantIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public User()
		{
			this._ProjectEmployees = new EntitySet<ProjectEmployee>(new Action<ProjectEmployee>(this.attach_ProjectEmployees), new Action<ProjectEmployee>(this.detach_ProjectEmployees));
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			this._Requirements = new EntitySet<Requirement>(new Action<Requirement>(this.attach_Requirements), new Action<Requirement>(this.detach_Requirements));
			this._Role = default(EntityRef<Role>);
			this._Tenant = default(EntityRef<Tenant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantId", DbType="Int NOT NULL")]
		public int TenantId
		{
			get
			{
				return this._TenantId;
			}
			set
			{
				if ((this._TenantId != value))
				{
					if (this._Tenant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTenantIdChanging(value);
					this.SendPropertyChanging();
					this._TenantId = value;
					this.SendPropertyChanged("TenantId");
					this.OnTenantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="Int NOT NULL")]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ProjectEmployee", Storage="_ProjectEmployees", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<ProjectEmployee> ProjectEmployees
		{
			get
			{
				return this._ProjectEmployees;
			}
			set
			{
				this._ProjectEmployees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Project", Storage="_Projects", ThisKey="UserId", OtherKey="ManagerId")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Requirement", Storage="_Requirements", ThisKey="UserId", OtherKey="AssignedUser")]
		public EntitySet<Requirement> Requirements
		{
			get
			{
				return this._Requirements;
			}
			set
			{
				this._Requirements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_User", Storage="_Tenant", ThisKey="TenantId", OtherKey="TenantId", IsForeignKey=true)]
		public Tenant Tenant
		{
			get
			{
				return this._Tenant.Entity;
			}
			set
			{
				Tenant previousValue = this._Tenant.Entity;
				if (((previousValue != value) 
							|| (this._Tenant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tenant.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Tenant.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._TenantId = value.TenantId;
					}
					else
					{
						this._TenantId = default(int);
					}
					this.SendPropertyChanged("Tenant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectEmployees(ProjectEmployee entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ProjectEmployees(ProjectEmployee entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Requirements(Requirement entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Requirements(Requirement entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TenantId;
		
		private int _RoleId;
		
		private string _Title;
		
		private EntitySet<User> _Users;
		
		private EntityRef<Tenant> _Tenant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenantIdChanging(int value);
    partial void OnTenantIdChanged();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public Role()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Tenant = default(EntityRef<Tenant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantId", DbType="Int NOT NULL")]
		public int TenantId
		{
			get
			{
				return this._TenantId;
			}
			set
			{
				if ((this._TenantId != value))
				{
					if (this._Tenant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTenantIdChanging(value);
					this.SendPropertyChanging();
					this._TenantId = value;
					this.SendPropertyChanged("TenantId");
					this.OnTenantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Users", ThisKey="RoleId", OtherKey="RoleId")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_Role", Storage="_Tenant", ThisKey="TenantId", OtherKey="TenantId", IsForeignKey=true)]
		public Tenant Tenant
		{
			get
			{
				return this._Tenant.Entity;
			}
			set
			{
				Tenant previousValue = this._Tenant.Entity;
				if (((previousValue != value) 
							|| (this._Tenant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tenant.Entity = null;
						previousValue.Roles.Remove(this);
					}
					this._Tenant.Entity = value;
					if ((value != null))
					{
						value.Roles.Add(this);
						this._TenantId = value.TenantId;
					}
					else
					{
						this._TenantId = default(int);
					}
					this.SendPropertyChanged("Tenant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tenants")]
	public partial class Tenant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TenantId;
		
		private string _OrgName;
		
		private string _LogoPath;
		
		private string _BannerColor;
		
		private string _TextColor;
		
		private bool _CustomTypes;
		
		private EntitySet<ProjectEmployee> _ProjectEmployees;
		
		private EntitySet<ProjectRequirement> _ProjectRequirements;
		
		private EntitySet<Project> _Projects;
		
		private EntitySet<Requirement> _Requirements;
		
		private EntitySet<RequirementType> _RequirementTypes;
		
		private EntitySet<Status> _Status;
		
		private EntitySet<User> _Users;
		
		private EntitySet<Role> _Roles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenantIdChanging(int value);
    partial void OnTenantIdChanged();
    partial void OnOrgNameChanging(string value);
    partial void OnOrgNameChanged();
    partial void OnLogoPathChanging(string value);
    partial void OnLogoPathChanged();
    partial void OnBannerColorChanging(string value);
    partial void OnBannerColorChanged();
    partial void OnTextColorChanging(string value);
    partial void OnTextColorChanged();
    partial void OnCustomTypesChanging(bool value);
    partial void OnCustomTypesChanged();
    #endregion
		
		public Tenant()
		{
			this._ProjectEmployees = new EntitySet<ProjectEmployee>(new Action<ProjectEmployee>(this.attach_ProjectEmployees), new Action<ProjectEmployee>(this.detach_ProjectEmployees));
			this._ProjectRequirements = new EntitySet<ProjectRequirement>(new Action<ProjectRequirement>(this.attach_ProjectRequirements), new Action<ProjectRequirement>(this.detach_ProjectRequirements));
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			this._Requirements = new EntitySet<Requirement>(new Action<Requirement>(this.attach_Requirements), new Action<Requirement>(this.detach_Requirements));
			this._RequirementTypes = new EntitySet<RequirementType>(new Action<RequirementType>(this.attach_RequirementTypes), new Action<RequirementType>(this.detach_RequirementTypes));
			this._Status = new EntitySet<Status>(new Action<Status>(this.attach_Status), new Action<Status>(this.detach_Status));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Roles = new EntitySet<Role>(new Action<Role>(this.attach_Roles), new Action<Role>(this.detach_Roles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenantId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TenantId
		{
			get
			{
				return this._TenantId;
			}
			set
			{
				if ((this._TenantId != value))
				{
					this.OnTenantIdChanging(value);
					this.SendPropertyChanging();
					this._TenantId = value;
					this.SendPropertyChanged("TenantId");
					this.OnTenantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string OrgName
		{
			get
			{
				return this._OrgName;
			}
			set
			{
				if ((this._OrgName != value))
				{
					this.OnOrgNameChanging(value);
					this.SendPropertyChanging();
					this._OrgName = value;
					this.SendPropertyChanged("OrgName");
					this.OnOrgNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogoPath", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string LogoPath
		{
			get
			{
				return this._LogoPath;
			}
			set
			{
				if ((this._LogoPath != value))
				{
					this.OnLogoPathChanging(value);
					this.SendPropertyChanging();
					this._LogoPath = value;
					this.SendPropertyChanged("LogoPath");
					this.OnLogoPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BannerColor", DbType="VarChar(7) NOT NULL", CanBeNull=false)]
		public string BannerColor
		{
			get
			{
				return this._BannerColor;
			}
			set
			{
				if ((this._BannerColor != value))
				{
					this.OnBannerColorChanging(value);
					this.SendPropertyChanging();
					this._BannerColor = value;
					this.SendPropertyChanged("BannerColor");
					this.OnBannerColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TextColor", DbType="VarChar(7) NOT NULL", CanBeNull=false)]
		public string TextColor
		{
			get
			{
				return this._TextColor;
			}
			set
			{
				if ((this._TextColor != value))
				{
					this.OnTextColorChanging(value);
					this.SendPropertyChanging();
					this._TextColor = value;
					this.SendPropertyChanged("TextColor");
					this.OnTextColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomTypes", DbType="Bit NOT NULL")]
		public bool CustomTypes
		{
			get
			{
				return this._CustomTypes;
			}
			set
			{
				if ((this._CustomTypes != value))
				{
					this.OnCustomTypesChanging(value);
					this.SendPropertyChanging();
					this._CustomTypes = value;
					this.SendPropertyChanged("CustomTypes");
					this.OnCustomTypesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_ProjectEmployee", Storage="_ProjectEmployees", ThisKey="TenantId", OtherKey="TenantId")]
		public EntitySet<ProjectEmployee> ProjectEmployees
		{
			get
			{
				return this._ProjectEmployees;
			}
			set
			{
				this._ProjectEmployees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_ProjectRequirement", Storage="_ProjectRequirements", ThisKey="TenantId", OtherKey="TenantId")]
		public EntitySet<ProjectRequirement> ProjectRequirements
		{
			get
			{
				return this._ProjectRequirements;
			}
			set
			{
				this._ProjectRequirements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_Project", Storage="_Projects", ThisKey="TenantId", OtherKey="TenantId")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_Requirement", Storage="_Requirements", ThisKey="TenantId", OtherKey="TenantId")]
		public EntitySet<Requirement> Requirements
		{
			get
			{
				return this._Requirements;
			}
			set
			{
				this._Requirements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_RequirementType", Storage="_RequirementTypes", ThisKey="TenantId", OtherKey="TenantId")]
		public EntitySet<RequirementType> RequirementTypes
		{
			get
			{
				return this._RequirementTypes;
			}
			set
			{
				this._RequirementTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_Status", Storage="_Status", ThisKey="TenantId", OtherKey="TenantId")]
		public EntitySet<Status> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				this._Status.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_User", Storage="_Users", ThisKey="TenantId", OtherKey="TenantId")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tenant_Role", Storage="_Roles", ThisKey="TenantId", OtherKey="TenantId")]
		public EntitySet<Role> Roles
		{
			get
			{
				return this._Roles;
			}
			set
			{
				this._Roles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectEmployees(ProjectEmployee entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = this;
		}
		
		private void detach_ProjectEmployees(ProjectEmployee entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = null;
		}
		
		private void attach_ProjectRequirements(ProjectRequirement entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = this;
		}
		
		private void detach_ProjectRequirements(ProjectRequirement entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = null;
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = null;
		}
		
		private void attach_Requirements(Requirement entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = this;
		}
		
		private void detach_Requirements(Requirement entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = null;
		}
		
		private void attach_RequirementTypes(RequirementType entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = this;
		}
		
		private void detach_RequirementTypes(RequirementType entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = null;
		}
		
		private void attach_Status(Status entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = this;
		}
		
		private void detach_Status(Status entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = null;
		}
		
		private void attach_Roles(Role entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = this;
		}
		
		private void detach_Roles(Role entity)
		{
			this.SendPropertyChanging();
			entity.Tenant = null;
		}
	}
}
#pragma warning restore 1591
